<?php

namespace App\Http\Controllers;

use App\Models\PeriodeParrainage;
use App\Models\Candidat;
use App\Models\Parrainage;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use App\Models\ElecteursErreurs;
use App\Models\HistoriqueUpload;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class DgeController extends Controller
{
    // üìå Fonction pour r√©cup√©rer l'adresse IP de l'utilisateur
    private function getUserIp()
    {
        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            return $_SERVER['HTTP_CLIENT_IP'];
        }
        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ipList = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
            return trim($ipList[0]);
        }
        return $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1';
    }

    // üìå Affichage du dashboard
    public function dashboard()
    {
        $candidats = Candidat::withCount('parrainages')->get();
        $periode = PeriodeParrainage::latest()->first();
        return view('dge.dashboard', compact('candidats', 'periode'));
    }

    // üìå Ajout de candidats
    public function ajoutCandidat()
    {
        $candidats = Candidat::orderBy('nom', 'asc')->get();
        return view('dge.ajout_candidat', compact('candidats'));
    }

    public function storeCandidat(Request $request)
    {
        $request->validate([
            'nom' => 'required|string|max:255',
            'prenom' => 'required|string|max:255',
            'numero_carte' => 'required|string|unique:candidats,numero_carte|max:20',
            'date_naissance' => 'required|date|before:today',
        ]);

        Candidat::create([
            'nom' => $request->nom,
            'prenom' => $request->prenom,
            'numero_carte' => $request->numero_carte,
            'date_naissance' => $request->date_naissance,
        ]);

        return redirect()->route('dge.ajout_candidat')->with('success', 'Candidat ajout√© avec succ√®s.');
    }

// Affichage des statistiques des parrainages
public function statistiques()
{
    // R√©cup√©rer tous les candidats avec le nombre de parrainages (relation avec parrainages)
    $candidats = Candidat::withCount('parrainages')->get();

    return view('dge.statistiques', compact('candidats'));
}




public function electeursErreurs()
{
    // R√©cup√©rer uniquement les √©lecteurs en erreur
    $electeursErreurs = DB::table('electeurs_erreurs')->get();

    return view('dge.electeurs_erreurs', compact('electeursErreurs'));
}


    
    // üìå Affichage du formulaire d'importation
    public function import()
    {
        return view('dge.import');
    }


    public function historiqueUpload()
{
    $historiqueUploads = HistoriqueUpload::with('electeursErreurs')->get();
    return view('dge.historique_upload', compact('historiqueUploads'));
}


    // üìå Traitement de l'importation d'un fichier CSV
    public function importStore(Request $request)
    {
        $request->validate([
            'fichier_electeurs' => 'required|file|mimes:csv,txt',
            'checksum' => 'required|string',
        ]);

        $file = $request->file('fichier_electeurs');
        $fileHash = hash_file('sha256', $file);
        $nomFichier = $file->getClientOriginalName();
        $ipAddress = $this->getUserIp();

        // üìå V√©rification du fichier avec la proc√©dure PL/SQL
        $result = DB::select("CALL ControlerFichierElecteurs(?, ?, ?, ?, @resultat)", [
            $fileHash,
            $request->checksum,
            $nomFichier,
            $ipAddress
        ]);
        $validation = DB::select("SELECT @resultat as resultat")[0]->resultat;

        if ($validation == 0) {
            return back()->with('error', 'Le fichier est invalide (checksum incorrect ou format non conforme).');
        }

        // üìå Stocker le fichier
        $filePath = $file->storeAs('uploads', $nomFichier);

        // üìå Enregistrer l'upload dans l'historique
        $historiqueUpload = HistoriqueUpload::create([
            'nom_fichier' => $nomFichier,
            'user_id' => Auth::id(),
            'ip_address' => $ipAddress,
            'checksum' => $fileHash,
            'status' => 'pending'
        ]);

        // üìå Traiter le fichier CSV
        $this->processCsvFile($filePath, $historiqueUpload->id);

        return back()->with('success', 'Fichier import√© avec succ√®s.');
    }

    // üìå Traitement du fichier CSV et insertion dans `electeurs_temp`
    private function processCsvFile($filePath, $uploadId)
    {
        $file = fopen(storage_path("app/" . $filePath), "r");
        $header = fgetcsv($file);
        $electeursValid√©s = [];
    
        while ($row = fgetcsv($file)) {
            $electeursValid√©s[] = [
                'numero_carte_electeur' => $row[0] ?? null,        // Colonne 1 : num√©ro carte √©lecteur
                'numero_cni' => $row[1] ?? null,                  // Colonne 2 : num√©ro CNI
                'nom_famille' => $row[2] ?? null,                 // Colonne 3 : nom famille
                'prenom' => $row[3] ?? null,                      // Colonne 4 : pr√©nom
                'bureau_vote' => $row[4] ?? null,                 // Colonne 5 : bureau de vote
                'date_naissance' => $row[5] ?? null,              // Colonne 6 : date de naissance
                'lieu_naissance' => $row[6] ?? null,              // Colonne 7 : lieu de naissance
                'sexe' => $row[7] ?? null,                        // Colonne 8 : sexe
            ];
        }
        fclose($file);
    
        // üìå Insertion des √©lecteurs dans `electeurs_temp`
        if (!empty($electeursValid√©s)) {
            DB::table('electeurs_temp')->insertOrIgnore($electeursValid√©s);
        }
    
        // üìå Ex√©cuter la proc√©dure stock√©e pour traiter les erreurs
        DB::statement("CALL ControlerElecteurs()");
    
        // üìå V√©rifier s'il y a des erreurs apr√®s ex√©cution de la proc√©dure
        $nbErreurs = DB::table('electeurs_erreurs')->where('tentative_upload_id', $uploadId)->count();
    
        // üìå Mise √† jour du statut de l'upload dans `historique_uploads`
        $historique = HistoriqueUpload::find($uploadId);
        $historique->status = ($nbErreurs > 0) ? 'error' : 'success';
        $historique->save();
    }
    

    public function togglePeriode($id)
{
    $periode = PeriodeParrainage::findOrFail($id);
    $periode->etat = !$periode->etat; // Inverser l'√©tat : 0 -> 1, 1 -> 0
    $periode->save();

    return redirect()->route('dge.gestion_periode')
        ->with('success', 'La p√©riode de parrainage a √©t√© ' . ($periode->etat ? 'ouverte' : 'ferm√©e') . ' avec succ√®s.');
}






public function validerElecteurs()
{
    $electeursTemp = DB::table('electeurs_temp')->get();
    $electeursErreurs = DB::table('electeurs_erreurs')->get();

    return view('dge/validation', compact('electeursTemp', 'electeursErreurs'));

    
}



    // üìå Finalisation de l'importation des √©lecteurs
   /* public function validerElecteurs()
    {
        $electeursTemp = DB::table('electeurs_temp')->get();
        if ($electeursTemp->isEmpty()) {
            return back()->with('error', 'Aucun √©lecteur √† valider.');
        }
    
        // V√©rifier s'il y a des erreurs
        $nbErreurs = ElecteursErreurs::count();
        if ($nbErreurs > 0) {
            return back()->with('error', 'Impossible de valider tant qu\'il y a des erreurs.');
        }
    
        // üìå Appel de la proc√©dure `ValiderImportation()`
        DB::statement("CALL ValiderImportation()");
    
        return back()->with('success', 'Tous les √©lecteurs valides ont √©t√© transf√©r√©s.');
    }*/
    


    public function corrigerElecteur(Request $request, $id)
{
    $electeur = ElecteursErreurs::find($id);

    if (!$electeur) {
        return back()->with('error', '√âlecteur introuvable.');
    }

    // Insertion de l'√©lecteur corrig√© dans la table `electeurs_temp`
    DB::table('electeurs_temp')->insert([
        'numero_carte_electeur' => $request->numero_carte_electeur,
        'numero_cni' => $request->numero_cni,
        'nom_famille' => $request->nom_famille,
        'prenom' => $request->prenom,
        'bureau_vote' => $request->bureau_vote,
        'date_naissance' => $request->date_naissance,
        'lieu_naissance' => $request->lieu_naissance,
        'sexe' => $request->sexe,
        
    ]);
    // Supprimer les anciennes erreurs pour l'√©lecteur avant de le traiter
DB::table('electeurs_erreurs')
->where('numero_carte_electeur', $request->numero_carte_electeur)
->orWhere('numero_cni', $request->numero_cni)
->delete();


    // üìå Ex√©cuter la proc√©dure stock√©e pour contr√¥ler l'√©lecteur
    DB::statement("CALL ControlerElecteurs()");

    // V√©rifier si l'√©lecteur a √©t√© d√©plac√© dans `electeurs_erreurs`
    $electeurEnErreur = DB::table('electeurs_erreurs')
        ->where('numero_carte_electeur', $request->numero_carte_electeur)
        ->orWhere('numero_cni', $request->numero_cni)
        ->first();

    if ($electeurEnErreur) {
        // Si l'√©lecteur est toujours dans `electeurs_erreurs`, afficher un message d'erreur
        return back()->with('error', "L'√©lecteur contient encore des erreurs et n'a pas √©t√© valid√©.");
    }

    // Suppression de l'√©lecteur de la table `electeurs_erreurs` apr√®s validation
    $electeur->delete();

    return back()->with('success', '√âlecteur corrig√© et valid√© avec succ√®s.');
}


public function supprimerElecteur($id)
{
    $electeur = ElecteursErreurs::find($id);

    if (!$electeur) {
        return back()->with('error', '√âlecteur introuvable.');
    }

    $electeur->delete();
    return back()->with('success', '√âlecteur supprim√© avec succ√®s.');
}






    // üìå Gestion de la p√©riode de parrainage
    public function gestionPeriode()
    {
        $periode = PeriodeParrainage::orderBy('id', 'desc')->first(); // R√©cup√©rer la derni√®re p√©riode
        return view('dge.gestion_periode', compact('periode'));
    }
    

    public function storePeriode(Request $request)
{
    $request->validate([
        'date_debut' => 'required|date|after_or_equal:today',
        'date_fin' => 'required|date|after:date_debut',
    ]);

    $periode = PeriodeParrainage::latest()->first(); // R√©cup√©rer la derni√®re p√©riode

    if ($periode) {
        if ($periode->etat == 1) {
            return redirect()->route('dge.gestion_periode')
                ->with('error', 'Vous ne pouvez pas modifier une p√©riode active.');
        }
        // Mettre √† jour la p√©riode existante
        $periode->date_debut = $request->date_debut;
        $periode->date_fin = $request->date_fin;
    } else {
        // Cr√©er une nouvelle p√©riode si aucune n'existe
        $periode = new PeriodeParrainage();
        $periode->date_debut = $request->date_debut;
        $periode->date_fin = $request->date_fin;
    }

    $periode->save();

    return redirect()->route('dge.gestion_periode')->with('success', 'P√©riode de parrainage mise √† jour.');
}

    
}

/*class DgeController extends Controller
{
     // üìå Ajoute cette m√©thode dans la classe pour qu'elle soit reconnue
     private function getUserIp() {
        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            return $_SERVER['HTTP_CLIENT_IP'];
        }

        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ipList = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
            return trim($ipList[0]); // Prend la premi√®re IP de la liste
        }

        return $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1'; // Valeur par d√©faut si aucune IP n'est trouv√©e
    }



    // Affichage du dashboard
    public function dashboard()
    {
        $parrainages = Parrainage::all();
        return view('dge.dashboard', compact('parrainages'));
    }
    public function ajoutCandidat()
{
    $candidats = Candidat::orderBy('nom', 'asc')->get(); // Trier les candidats par ordre alphab√©tique
    return view('dge.ajout_candidat', compact('candidats'));
}


    // Affichage du formulaire d'importation de fichier
    public function import()
    {
        return view('dge.import');
    }


    

    // Traitement de l'importation de fichier CSV
    public function importStore(Request $request)
    {
        $request->validate([
            'fichier_electeurs' => 'required|file|mimes:csv,txt',
            'checksum' => 'required|string',
        ]);
    
        $file = $request->file('fichier_electeurs');
        $fileHash = hash_file('sha256', $file);
    
        if ($fileHash !== $request->checksum) {
            return back()->with('error', 'Le checksum du fichier ne correspond pas.');
        }
    
        // üìå R√©cup√©rer l'adresse IP avec la fonction universelle
        $ipAddress = $this->getUserIp();
        
        // üìå R√©cup√©rer l'utilisateur connect√©
        $userId = Auth::id() ?? null; 
    
        // üìå Enregistrer le fichier et traiter son contenu
        $filePath = $file->storeAs('uploads', 'electeurs.csv');
    
        // üìå Ajouter l'historique de l'upload
        $historiqueUpload = HistoriqueUpload::create([
            'nom_fichier' => 'electeurs.csv',
            'user_id' => $userId,
            'ip_address' => $ipAddress,
            'checksum' => $fileHash,
            'file_hash' => $fileHash, // Ajout de file_hash
            'status' => 'success'
        ]);
    
        // üìå Traitement du fichier CSV
        $this->processCsvFile($filePath, $historiqueUpload->id);
    
        return back()->with('success', 'Fichier import√© avec succ√®s.');
    }
    
    


    private function processCsvFile($filePath, $uploadId)
    {
        $file = fopen(storage_path("app/" . $filePath), "r");
        $header = fgetcsv($file);
        $errors = [];
        $electeursValides = [];
    
        while ($row = fgetcsv($file)) {
            $data = [
                'numero_carte_electeur' => $row[0] ?? 'Non renseign√©',
                'numero_cin' => $row[1] ?? 'Non renseign√©',
                'nom_famille' => $row[2] ?? 'Non renseign√©',
                'prenom' => $row[3] ?? 'Non renseign√©',
                'date_naissance' => $row[4] ?? 'Non renseign√©',
                'lieu_naissance' => $row[5] ?? 'Non renseign√©',
                'sexe' => $row[6] ?? 'Non renseign√©',
            ];
    
            if (in_array('Non renseign√©', $data)) {
                $errors[] = array_merge($data, [
                    'nature_erreur' => 'Donn√©es incompl√®tes',
                    'description_erreur' => 'Un ou plusieurs champs sont vides.',
                    'tentative_upload_id' => $uploadId
                ]);
            } else {
                $electeursValides[] = $data;
            }
        }
        fclose($file);
    
        // Enregistrement des erreurs
        if (!empty($errors)) {
            ElecteursErreurs::insert($errors);
        }
    
        // Enregistrement des √©lecteurs valides
        if (!empty($electeursValides)) {
            DB::table('electeurs_temp')->insertOrIgnore($electeursValides);
        }
    
        // Mise √† jour du statut de l'historique
        $historique = HistoriqueUpload::find($uploadId);
        $historique->status = empty($errors) ? 'success' : 'error';
        $historique->error_message = empty($errors) ? null : 'Des erreurs ont √©t√© d√©tect√©es';
        $historique->save();
    }
    
    // Affichage du formulaire de gestion de la p√©riode de parrainage
    public function gestionPeriode()
{
    // On r√©cup√®re la p√©riode actuelle s'il y en a une
    $periode = PeriodeParrainage::latest()->first();

    // On retourne la vue avec la p√©riode (ou null si aucune p√©riode n'est d√©finie)
    return view('dge.gestion_periode', compact('periode'));
}


    // Enregistrement des dates de la p√©riode de parrainage
    public function storePeriode(Request $request)
    {
        $request->validate([
            'date_debut' => 'required|date|after_or_equal:today',
            'date_fin' => 'required|date|after:date_debut',
        ]);

        $periode = PeriodeParrainage::firstOrCreate([]);
        $periode->date_debut = $request->date_debut;
        $periode->date_fin = $request->date_fin;
        $periode->save();

        return redirect()->route('dge.gestion_periode')->with('success', 'P√©riode de parrainage mise √† jour.');
    }
// Affichage du formulaire d'ajout d'un candidat + liste des candidats


// Enregistrement d'un candidat
public function storeCandidat(Request $request)
{
    $request->validate([
        'nom' => 'required|string|max:255',
        'prenom' => 'required|string|max:255',
        'numero_carte' => 'required|string|unique:candidats,numero_carte|max:20',
        'date_naissance' => 'required|date|before:today',
    ]);

    try {
        Candidat::create([
            'nom' => $request->nom,
            'prenom' => $request->prenom,
            'numero_carte' => $request->numero_carte,
            'date_naissance' => $request->date_naissance,
        ]);

        return redirect()->route('dge.ajout_candidat')->with('success', 'Candidat ajout√© avec succ√®s.');
    } catch (\Exception $e) {
        return redirect()->back()->with('error', 'Une erreur est survenue lors de l\'ajout.');
    }
}


    // Affichage des statistiques des parrainages
    public function statistiques()
{
    // R√©cup√©rer tous les candidats avec le nombre de parrainages (relation avec parrainages)
    $candidats = Candidat::withCount('parrainages')->get();

    return view('dge.statistiques', compact('candidats'));
}

    public function electeursErreurs()
    {
        $electeursErreurs = ElecteursErreurs::all();
        return view('dge.electeurs_erreurs', compact('electeursErreurs'));

    }
    
public function historiqueUpload()
{
    $historiqueUploads = HistoriqueUpload::with('electeursErreurs')->get();
    return view('dge.historique_upload', compact('historiqueUploads'));
}


public function validerElecteurs()
{
    // V√©rifier si des √©lecteurs sont en attente
    $electeursTemp = DB::table('electeurs_temp')->get();

    if ($electeursTemp->isEmpty()) {
        return back()->with('error', 'Aucun √©lecteur √† valider.');
    }

    // Ins√©rer dans la table persistante `electeurs_valides`
    DB::table('electeurs_valides')->insert(
        $electeursTemp->map(function ($electeur) {
            return (array) $electeur;
        })->toArray()
    );

    // Supprimer les √©lecteurs de la table temporaire
    DB::table('electeurs_temp')->delete();

    return back()->with('success', 'Tous les √©lecteurs ont √©t√© valid√©s et stock√©s d√©finitivement.');
}
}*/





